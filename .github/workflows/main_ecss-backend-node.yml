name: ECSS Backend Node

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:  
      contents: read
      id-token: write
    environment:
      name: 'Production'
    env:
      PIP_ROOT_USER_ACTION: ignore

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_41A26900721847DFB378D91324F04C5C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_2F80B66AC3E847918F02B61E622A3768 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_5AB7D5C3556C4887A1D6861E627F89F7 }}

      - name: Set the correct Azure subscription
        run: |
          az account set --subscription ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_5AB7D5C3556C4887A1D6861E627F89F7 }}

      - name: Check if a deployment is in progress
        run: |
            echo "Checking for active deployment process for ecss-backend-node..."
            RESOURCE_GROUP="ECSS-Course-Management-System"
            DEPLOYMENT_STATUS=$(az webapp show --name ecss-backend-node --resource-group $RESOURCE_GROUP --query "state" -o tsv)
        
            echo "Current deployment status: $DEPLOYMENT_STATUS"
        
            if [ "$DEPLOYMENT_STATUS" == "Running" ]; then
              echo "Deployment is already in progress for ecss-backend-node. Exiting early."
              echo "deployment_in_progress=true" >> $GITHUB_OUTPUT
            else
              echo "No deployment in progress for ecss-backend-node. Proceeding with build."
              echo "deployment_in_progress=false" >> $GITHUB_OUTPUT
            fi
        
      - name: Fetch previous commit
        run: |
          git fetch origin main --depth=2
          echo "Before push commit:"
          git log --oneline -n 2

      - name: Check for changes in the backend folder
        id: check_changes
        run: |
          echo "Checking for changes in the backend folder between before and after push..."
          git fetch origin main --depth=2
          CHANGES=$(git diff --name-only HEAD~1 HEAD -- backend/)

          if [ -z "$CHANGES" ]; then
            echo "No changes detected in the backend folder. Skipping build and deploy."
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in the backend folder. Proceeding with build and deploy."
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          fi

      - name: Debug changes detected
        run: 'echo "Changes detected: ${{ steps.check_changes.outputs.changes_detected }}"'

      - name: Set up Node.js version
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: npm install, build, and test
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        run: |
          cd backend
          npm install
          npm run build --if-present

      - name: Zip artifact for deployment
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        run: |
          cd backend
          zip -r ../release.zip .

      - name: Upload artifact for deployment
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

      - name: Stop Azure Web App (prevent conflicts)
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        run: |
          echo "Stopping Azure Web App to prevent deployment conflicts..."
          az webapp stop --name ecss-backend-node --resource-group ECSS-Course-Management-System
        continue-on-error: true

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ecss-backend-node'
          slot-name: 'Production'
          package: ./release.zip
          clean: true
        continue-on-error: true

      - name: Wait and retry deployment
        if: steps.deploy-to-webapp.outcome == 'failure'
        run: |
          echo "First deployment attempt failed. Waiting 60 seconds before retry..."
          sleep 60

      - name: Force stop any running deployments
        if: steps.deploy-to-webapp.outcome == 'failure'
        run: |
          echo "Attempting to cancel any running deployments..."
          az webapp deployment list-publishing-credentials --name ecss-backend-node --resource-group ECSS-Course-Management-System || true
          sleep 30
        continue-on-error: true

      - name: Deploy to Azure Web App (Retry)
        if: steps.deploy-to-webapp.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ecss-backend-node'
          slot-name: 'Production'
          package: ./release.zip
          clean: true

      - name: Start Azure Web App
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        run: |
          echo "Starting Azure Web App..."
          az webapp start --name ecss-backend-node --resource-group ECSS-Course-Management-System

      - name: Verify deployment
        if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
        run: |
          echo "Waiting for app to start..."
          sleep 30
          
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ecss-backend-node.azurewebsites.net || echo "000")
          
          if [ "$response" -eq 200 ] || [ "$response" -eq 301 ] || [ "$response" -eq 302 ]; then
            echo "✅ Deployment successful! App is responding with HTTP $response"
          else
            echo "⚠️ App deployed but may not be fully ready. HTTP response: $response"
            echo "App logs (last 100 lines):"
            az webapp log tail --name ecss-backend-node --resource-group ECSS-Course-Management-System --provider application --verbosity verbose || true
          fi

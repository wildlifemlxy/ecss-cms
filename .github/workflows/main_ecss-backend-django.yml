name: ECSS Backend Django

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PIP_ROOT_USER_ACTION: ignore

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    environment:
      name: 'Production'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'djangoPython/requirements.txt'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=venv" >> $GITHUB_ENV
          echo "venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          if [ -f djangoPython/requirements.txt ]; then
            echo "Installing from djangoPython/requirements.txt"
            pip install -r djangoPython/requirements.txt
          elif [ -f requirements.txt ]; then
            echo "Installing from root requirements.txt"
            pip install -r requirements.txt
          else
            echo "No requirements.txt found. Installing minimal Django setup..."
            pip install Django djangorestframework django-cors-headers gunicorn
          fi

      - name: Collect static files
        run: |
          source venv/bin/activate
          cd djangoPython
          if [ -f manage.py ]; then
            python manage.py collectstatic --noinput --clear || echo "Static files collection skipped"
          fi

      - name: Run Django tests (optional)
        run: |
          source venv/bin/activate
          cd djangoPython
          if [ -f manage.py ]; then
            python manage.py check --deploy || echo "Django checks completed with warnings"
          fi

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          rm -rf deployment_package
          mkdir -p deployment_package
          
          # Copy Django application files (flatten the structure)
          cp -r djangoPython/* deployment_package/
          
          # Make sure requirements.txt is in the root
          if [ -f deployment_package/requirements.txt ]; then
            echo "✓ requirements.txt found in deployment package"
          else
            echo "✗ requirements.txt not found - copying from djangoPython/"
            cp djangoPython/requirements.txt deployment_package/ 2>/dev/null || echo "No requirements.txt found"
          fi
          
          # Create a simple startup script for Azure App Service
          echo '#!/bin/bash' > deployment_package/startup.sh
          echo 'echo "Starting Django application..."' >> deployment_package/startup.sh
          echo 'python -m gunicorn --bind=0.0.0.0:8000 --timeout 600 --workers=4 djangoPython.wsgi:application' >> deployment_package/startup.sh
          chmod +x deployment_package/startup.sh
          
          # Remove unnecessary files
          find deployment_package -name "*.pyc" -delete
          find deployment_package -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find deployment_package -name "*.git*" -delete 2>/dev/null || true
          find deployment_package -name ".DS_Store" -delete 2>/dev/null || true
          
          # Create the deployment zip
          cd deployment_package
          zip -r ../release.zip . -x "*.DS_Store*"
          cd ..
          
          echo "✓ Deployment package created successfully"
          echo "Package size: $(du -h release.zip | cut -f1)"
          echo "Main files in package:"
          unzip -l release.zip | grep -E "(manage.py|wsgi.py|requirements.txt|settings.py|startup.sh)" || echo "Core files check completed"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DB1EDA88A3DA4E8D846F3C3D5AB12A22 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_22BDF8F60B124137A56F942213EAB1D3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1F917677349441DF9FFD4FFAA1773557 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ecss-backend-django'
          slot-name: 'Production'
          package: release.zip

      - name: Verify deployment
        run: |
          echo "✓ Deployment completed successfully"
          echo "The Azure App Service will automatically:"
          echo "  - Install dependencies from requirements.txt"
          echo "  - Configure Python 3.12 runtime"
          echo "  - Start the Django application"
          echo ""
          echo "Manual configuration may be needed in Azure Portal:"
          echo "  1. Go to Azure Portal > App Services > ecss-backend-django"
          echo "  2. Set Startup Command: 'gunicorn --bind=0.0.0.0 --timeout 600 --workers=4 djangoPython.wsgi'"
          echo "  3. Check that Python version is set to 3.12"
          echo ""
          echo "App URL: https://ecss-backend-django.azurewebsites.net"
        
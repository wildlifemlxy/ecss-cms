name: ECSS Backend Django

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    environment:
      name: 'Production'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=venv" >> $GITHUB_ENV
          echo "venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "Installing from root requirements.txt"
            pip install -r requirements.txt
          elif [ -f djangoPython/requirements.txt ]; then
            echo "Installing from djangoPython/requirements.txt"
            pip install -r djangoPython/requirements.txt
          else
            echo "No requirements.txt found. Creating basic Django requirements..."
            pip install Django djangorestframework django-cors-headers
          fi

      - name: Collect static files
        run: |
          source venv/bin/activate
          cd djangoPython
          if [ -f manage.py ]; then
            python manage.py collectstatic --noinput || echo "Static files collection skipped"
          fi

      - name: Run Django tests
        run: |
          source venv/bin/activate
          cd djangoPython
          if [ -f manage.py ]; then
            python manage.py test --verbosity=2 || echo "Tests skipped or failed"
          fi
        continue-on-error: true

      - name: Zip artifact for deployment
        run: |
          chmod +x djangoPython/startup.sh
          zip -r release.zip djangoPython \
            -x "djangoPython/venv/*" \
            -x "djangoPython/__pycache__/*" \
            -x "djangoPython/*/__pycache__/*" \
            -x "djangoPython/*/*/__pycache__/*" \
            -x "djangoPython/.env" \
            -x "djangoPython/db.sqlite3" \
            -x "djangoPython/media/*" \
            -x "djangoPython/static/*"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DB1EDA88A3DA4E8D846F3C3D5AB12A22 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_22BDF8F60B124137A56F942213EAB1D3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1F917677349441DF9FFD4FFAA1773557 }}

      - name: Stop Azure Web App
        run: |
          az webapp stop --name ecss-backend-django --resource-group $(az webapp show --name ecss-backend-django --query resourceGroup -o tsv)
        continue-on-error: true

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ecss-backend-django'
          slot-name: 'Production'
          package: release.zip
          clean: true
        id: deploy_attempt_1
        continue-on-error: true

      - name: Wait and retry deployment
        if: steps.deploy_attempt_1.outcome == 'failure'
        run: |
          echo "First deployment attempt failed. Waiting 60 seconds before retry..."
          sleep 60

      - name: Force stop any running deployments
        if: steps.deploy_attempt_1.outcome == 'failure'
        run: |
          echo "Attempting to cancel any running deployments..."
          az webapp deployment list-publishing-credentials --name ecss-backend-django --resource-group $(az webapp show --name ecss-backend-django --query resourceGroup -o tsv) || true
          sleep 30
        continue-on-error: true

      - name: Deploy to Azure Web App (Retry)
        if: steps.deploy_attempt_1.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ecss-backend-django'
          slot-name: 'Production'
          package: release.zip
          clean: true

      - name: Start Azure Web App
        run: |
          az webapp start --name ecss-backend-django --resource-group $(az webapp show --name ecss-backend-django --query resourceGroup -o tsv)

      - name: Verify deployment
        run: |
          echo "Waiting for app to start..."
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ecss-backend-django.azurewebsites.net || echo "000")
          if [ "$response" -eq 200 ] || [ "$response" -eq 301 ] || [ "$response" -eq 302 ]; then
            echo "✅ Deployment successful! App is responding with HTTP $response"
          else
            echo "⚠️ App deployed but may not be fully ready. HTTP response: $response"
            echo "App logs (last 100 lines):"
            az webapp log tail --name ecss-backend-django --resource-group $(az webapp show --name ecss-backend-django --query resourceGroup -o tsv) --provider application --verbosity verbose || true
          fi
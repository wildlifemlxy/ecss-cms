name: ECSS Backend Django

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PIP_ROOT_USER_ACTION: ignore

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    environment:
      name: 'Production'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'djangoPython/requirements.txt'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=venv" >> $GITHUB_ENV
          echo "venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          if [ -f djangoPython/requirements.txt ]; then
            echo "Installing from djangoPython/requirements.txt"
            pip install -r djangoPython/requirements.txt
          elif [ -f requirements.txt ]; then
            echo "Installing from root requirements.txt"
            pip install -r requirements.txt
          else
            echo "No requirements.txt found. Installing minimal Django setup..."
            pip install Django djangorestframework django-cors-headers gunicorn
          fi

      - name: Collect static files
        run: |
          source venv/bin/activate
          cd djangoPython
          if [ -f manage.py ]; then
            python manage.py collectstatic --noinput --clear || echo "Static files collection skipped"
          fi

      - name: Create deployment package
        run: |
          # Create a deployment package with the Django application
          mkdir -p deployment_package
          
          # Copy the Django application files
          cp -r djangoPython/* deployment_package/
          
          # Copy virtual environment dependencies (if needed)
          # Note: Azure App Service will install from requirements.txt
          
          # Create the zip package
          cd deployment_package
          zip -r ../release.zip . -x "*.pyc" "*/__pycache__/*" "*.git*"
          cd ..
          
          echo "Deployment package created: release.zip"
          ls -la release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DB1EDA88A3DA4E8D846F3C3D5AB12A22 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_22BDF8F60B124137A56F942213EAB1D3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1F917677349441DF9FFD4FFAA1773557 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ecss-backend-django'
          slot-name: 'Production'
          package: release.zip
        
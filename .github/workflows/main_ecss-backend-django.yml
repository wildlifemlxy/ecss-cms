name: ECSS Backend Django

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PIP_ROOT_USER_ACTION: ignore

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    environment:
      name: 'Production'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'djangoPython/requirements.txt'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=venv" >> $GITHUB_ENV
          echo "venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          if [ -f djangoPython/requirements.txt ]; then
            echo "Installing from djangoPython/requirements.txt"
            pip install -r djangoPython/requirements.txt
          elif [ -f requirements.txt ]; then
            echo "Installing from root requirements.txt"
            pip install -r requirements.txt
          else
            echo "No requirements.txt found. Installing minimal Django setup..."
            pip install Django djangorestframework django-cors-headers gunicorn
          fi

      - name: Collect static files
        run: |
          source venv/bin/activate
          cd djangoPython
          if [ -f manage.py ]; then
            python manage.py collectstatic --noinput --clear || echo "Static files collection skipped"
          fi

      - name: Run Django tests
        run: |
          source venv/bin/activate
          cd djangoPython
          if [ -f manage.py ]; then
            python manage.py test --verbosity=2 || echo "Tests skipped or failed"
          fi
        continue-on-error: true

      - name: Zip artifact for deployment
        run: |
          chmod +x djangoPython/startup.sh
          # Create a lightweight deployment package with pre-built dependencies
          zip -r release.zip djangoPython venv/lib/python3.12/site-packages \
            -x "djangoPython/venv/*" \
            -x "djangoPython/__pycache__/*" \
            -x "djangoPython/*/__pycache__/*" \
            -x "djangoPython/*/*/__pycache__/*" \
            -x "djangoPython/.env" \
            -x "djangoPython/db.sqlite3" \
            -x "djangoPython/media/*" \
            -x "venv/bin/*" \
            -x "venv/include/*" \
            -x "venv/share/*" \
            -x "venv/pyvenv.cfg" \
            -x "*.pyc" \
            -x "*/__pycache__/*"
          
          echo "Package contents:"
          unzip -l release.zip | head -20

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DB1EDA88A3DA4E8D846F3C3D5AB12A22 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_22BDF8F60B124137A56F942213EAB1D3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1F917677349441DF9FFD4FFAA1773557 }}

      - name: Configure Azure App Service for faster deployment
        run: |
          echo "Finding webapp resource group..."
          
          # Try multiple methods to find the resource group
          RESOURCE_GROUP=""
          
          # Method 1: Direct webapp show
          RESOURCE_GROUP=$(az webapp show --name ecss-backend-django --query resourceGroup -o tsv 2>/dev/null || echo "")
          
          # Method 2: List all webapps and filter
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "Method 1 failed, trying webapp list..."
            RESOURCE_GROUP=$(az webapp list --query "[?name=='ecss-backend-django'].resourceGroup | [0]" -o tsv 2>/dev/null || echo "")
          fi
          
          # Method 3: Search in all resource groups
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "Method 2 failed, searching all resource groups..."
            for rg in $(az group list --query "[].name" -o tsv 2>/dev/null || echo ""); do
              if az webapp show --name ecss-backend-django --resource-group "$rg" >/dev/null 2>&1; then
                RESOURCE_GROUP="$rg"
                break
              fi
            done
          fi
          
          if [ ! -z "$RESOURCE_GROUP" ]; then
            echo "✅ Found webapp in resource group: $RESOURCE_GROUP"
            echo "Optimizing app service settings for faster deployment..."
            
            # Check current startup command
            echo "Current startup command:"
            az webapp config show --name ecss-backend-django --resource-group "$RESOURCE_GROUP" \
              --query "appCommandLine" -o tsv 2>/dev/null || echo "No startup command set"
            
            # Clear any existing startup command that includes pip installs
            echo "Clearing existing startup command..."
            az webapp config set --name ecss-backend-django --resource-group "$RESOURCE_GROUP" \
              --startup-file "" 2>/dev/null || true
            
            # Set app service to use pre-built packages
            az webapp config appsettings set --name ecss-backend-django --resource-group "$RESOURCE_GROUP" \
              --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                        ENABLE_ORYX_BUILD=false \
                        POST_BUILD_SCRIPT_PATH="" \
                        POST_BUILD_COMMAND="" 2>/dev/null || true
            
            # Set the correct startup command (use our optimized startup.sh)
            az webapp config set --name ecss-backend-django --resource-group "$RESOURCE_GROUP" \
              --startup-file "startup.sh" 2>/dev/null || true
              
            echo "✅ Configured startup command to use optimized startup.sh"
            
            # Verify the change
            echo "New startup command:"
            az webapp config show --name ecss-backend-django --resource-group "$RESOURCE_GROUP" \
              --query "appCommandLine" -o tsv 2>/dev/null || echo "Using startup.sh"
          else
            echo "❌ Could not find webapp 'ecss-backend-django' in any resource group"
            echo "Available webapps:"
            az webapp list --query "[].{name:name,resourceGroup:resourceGroup}" -o table 2>/dev/null || echo "Failed to list webapps"
          fi
        continue-on-error: true

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ecss-backend-django'
          slot-name: 'Production'
          package: release.zip
          clean: true
          restart: false

      - name: Start Azure Web App
        run: |
          echo "Finding webapp resource group for start operation..."
          
          # Try multiple methods to find the resource group
          RESOURCE_GROUP=""
          
          # Method 1: Direct webapp show
          RESOURCE_GROUP=$(az webapp show --name ecss-backend-django --query resourceGroup -o tsv 2>/dev/null || echo "")
          
          # Method 2: List all webapps and filter
          if [ -z "$RESOURCE_GROUP" ]; then
            RESOURCE_GROUP=$(az webapp list --query "[?name=='ecss-backend-django'].resourceGroup | [0]" -o tsv 2>/dev/null || echo "")
          fi
          
          if [ ! -z "$RESOURCE_GROUP" ]; then
            echo "Starting webapp in resource group: $RESOURCE_GROUP"
            az webapp start --name ecss-backend-django --resource-group "$RESOURCE_GROUP" 2>/dev/null || true
          else
            echo "Could not determine resource group. Checking webapp status..."
            az webapp list --query "[?name=='ecss-backend-django'].{name:name,resourceGroup:resourceGroup,state:state}" -o table 2>/dev/null || true
          fi

      - name: Verify deployment
        run: |
          echo "Waiting for app to start..."
          sleep 15
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ecss-backend-django.azurewebsites.net || echo "000")
          if [ "$response" -eq 200 ] || [ "$response" -eq 301 ] || [ "$response" -eq 302 ]; then
            echo "✅ Deployment successful! App is responding with HTTP $response"
          else
            echo "⚠️ App deployed but may not be fully ready. HTTP response: $response"
            echo "Waiting additional 15 seconds and retrying..."
            sleep 15
            response=$(curl -s -o /dev/null -w "%{http_code}" https://ecss-backend-django.azurewebsites.net || echo "000")
            if [ "$response" -eq 200 ] || [ "$response" -eq 301 ] || [ "$response" -eq 302 ]; then
              echo "✅ Deployment successful after retry! App is responding with HTTP $response"
            else
              echo "⚠️ App may still be starting. HTTP response: $response"
              echo "App logs:"
              
              # Try to find resource group for logs
              RESOURCE_GROUP=""
              RESOURCE_GROUP=$(az webapp show --name ecss-backend-django --query resourceGroup -o tsv 2>/dev/null || echo "")
              if [ -z "$RESOURCE_GROUP" ]; then
                RESOURCE_GROUP=$(az webapp list --query "[?name=='ecss-backend-django'].resourceGroup | [0]" -o tsv 2>/dev/null || echo "")
              fi
              
              if [ ! -z "$RESOURCE_GROUP" ]; then
                az webapp log tail --name ecss-backend-django --resource-group "$RESOURCE_GROUP" --provider application --verbosity verbose 2
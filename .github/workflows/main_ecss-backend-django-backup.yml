name: ECSS Backend Django - Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  AZURE_WEBAPP_NAME: 'ecss-backend-django'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Required for actions/checkout
      id-token: write  # Required for Azure login

    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Create virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          
          if [ -f djangoPython/requirements.txt ]; then
            echo "Installing dependencies from djangoPython/requirements.txt"
            pip install -r djangoPython/requirements.txt --no-cache-dir
            echo "✓ Dependencies installed successfully"
          else
            echo "❌ requirements.txt not found in djangoPython/ directory"
            exit 1
          fi

      - name: Run Django checks
        run: |
          source venv/bin/activate
          cd djangoPython
          python manage.py check --deploy
        continue-on-error: true

      - name: Collect static files
        run: |
          source venv/bin/activate
          cd djangoPython
          python manage.py collectstatic --noinput --clear
        continue-on-error: true

      - name: Create deployment package
        run: |
          source venv/bin/activate
          rm -rf deployment_package
          mkdir -p deployment_package
          
          # Copy Django application files to the root of deployment package
          cp -r djangoPython/* deployment_package/
          
          # Create proper Python packages directory
          mkdir -p deployment_package/.python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages
          echo "Copying Python packages..."
          cp -r venv/lib/python*/site-packages/* deployment_package/.python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages/ 2>/dev/null || echo "Package copy completed"
          
          # Test WSGI module before deployment
          echo "=== Testing WSGI module ==="
          cd djangoPython
          python -c "import djangoPython.wsgi; print('✓ WSGI module imports successfully')" || echo "❌ WSGI module import failed"
          cd ..
          
          # Create optimized startup script for Azure App Service
          cat > deployment_package/startup.sh << 'EOF'
#!/bin/bash
echo "=== Azure App Service Startup ==="
cd /home/site/wwwroot
export PYTHONPATH="/home/site/wwwroot:/home/site/wwwroot/.python_packages/lib/python3.13/site-packages:$PYTHONPATH"
export DJANGO_SETTINGS_MODULE=djangoPython.settings
export PYTHONUNBUFFERED=1
export PORT=${PORT:-8000}

echo "Current directory: $(pwd)"
echo "Python path: $PYTHONPATH"
echo "Starting Gunicorn with WSGI: djangoPython.wsgi:application"

# Start Gunicorn with optimized settings for Azure
gunicorn \
  --bind=0.0.0.0:$PORT \
  --workers=2 \
  --worker-class=sync \
  --timeout=120 \
  --keep-alive=2 \
  --max-requests=1000 \
  --max-requests-jitter=50 \
  --access-logfile=- \
  --error-logfile=- \
  --log-level=info \
  --capture-output \
  djangoPython.wsgi:application
EOF

          chmod +x deployment_package/startup.sh
          
          # Create simple startup.txt as fallback
          echo "gunicorn --bind=0.0.0.0:8000 --workers=2 --timeout=120 --access-logfile=- --error-logfile=- djangoPython.wsgi:application" > deployment_package/startup.txt
          
          find deployment_package -name "*.pyc" -delete 2>/dev/null || true
          find deployment_package -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find deployment_package -name ".DS_Store" -delete 2>/dev/null || true
          find deployment_package -name "*.pyo" -delete 2>/dev/null || true
          find deployment_package -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Debug: Show deployment package structure
          echo "=== Deployment Package Structure ==="
          ls -la deployment_package/
          echo "=== Django WSGI file check ==="
          if [ -f deployment_package/djangoPython/wsgi.py ]; then
            echo "✓ WSGI file found at deployment_package/djangoPython/wsgi.py"
          else
            echo "❌ WSGI file NOT found - checking structure..."
            find deployment_package -name "wsgi.py" -type f
          fi
          
          cd deployment_package
          zip -r ../release.zip . -x "*.DS_Store*" "*.git*"
          cd ..
          
          echo "✓ Deployment package created successfully"
          echo "Package size: $(du -h release.zip | cut -f1)"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_DB1EDA88A3DA4E8D846F3C3D5AB12A22 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_22BDF8F60B124137A56F942213EAB1D3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1F917677349441DF9FFD4FFAA1773557 }}

      - name: Pre-configure Azure App Service
        run: |
          echo "Pre-configuring Azure App Service..."
          
          # Stop the app service to prevent conflicts during deployment
          az webapp stop \
            --resource-group ecss-backend-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }} || echo "App already stopped or not found"
          
          # Configure app service settings
          az webapp config set \
            --resource-group ecss-backend-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --linux-fx-version "PYTHON|3.13" \
            --startup-file "startup.sh"
          
          # Set environment variables
          az webapp config appsettings set \
            --resource-group ecss-backend-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings \
            DJANGO_SETTINGS_MODULE=djangoPython.settings \
            PYTHONUNBUFFERED=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
        continue-on-error: true

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          package: release.zip
          clean: true
          restart: true
          type: 'ZIP'
        continue-on-error: true

      - name: Alternative deployment using Azure CLI (if webapps-deploy failed)
        if: failure()
        run: |
          echo "Primary deployment failed, trying Azure CLI deployment..."
          az webapp deployment source config-zip \
            --resource-group ecss-backend-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --src release.zip \
            --timeout 600
        continue-on-error: true

      - name: Configure App Service Settings
        run: |
          echo "Configuring Azure App Service settings..."
          az webapp config set \
            --resource-group ecss-backend-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --startup-file "startup.sh" \
            --linux-fx-version "PYTHON|3.13"
          
          # Set environment variables
          az webapp config appsettings set \
            --resource-group ecss-backend-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings \
            DJANGO_SETTINGS_MODULE=djangoPython.settings \
            PYTHONUNBUFFERED=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false
        continue-on-error: true

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Application URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          
          # Check deployment status
          echo "=== Checking deployment status ==="
          az webapp show \
            --resource-group ecss-backend-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --query "state" \
            --output table || echo "Could not get app status"
          
          # Wait for the app to start
          echo "Waiting for application to start..."
          sleep 60
          
          # Basic health check
          echo "=== Running health check ==="
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" || echo "000")
          if [ "$response" = "200" ] || [ "$response" = "302" ]; then
            echo "✓ Application is responding (HTTP $response)"
          else
            echo "⚠️ Application health check returned HTTP $response"
            echo "Checking application logs for troubleshooting..."
            az webapp log tail \
              --resource-group ecss-backend-rg \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --provider application \
              --timeout 30 || echo "Could not retrieve logs"
          fi
        continue-on-error: true
